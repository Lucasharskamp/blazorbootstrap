@namespace BlazorBootstrap
@inherits BlazorBootstrapComponentBase

<div class="d-flex">
    <button type="button" class="btn @(FilterButtonColor.ToButtonColorClass()) me-1 d-flex dropdown-toggle bb-grid-filter @FilterButtonCssClass" data-bs-toggle="dropdown" aria-expanded="false">
        @if (string.IsNullOrWhiteSpace(filterValue))
        {
            <span class="me-2">
                <Icon Name="IconName.Funnel" />
            </span>
        }
        else
        {
            <span class="me-2">
                <Icon Name="IconName.FunnelFill" />
            </span>
        }
        <span>@selectedFilterSymbol</span>
    </button>
    <ul class="dropdown-menu">
        @if (filterOperators != null && filterOperators.Any())
        {
            foreach (var item in filterOperators)
            {
                <li class="mx-1 rounded-3">
                    <div class="dropdown-item p-1" role="button" @onclick="(async()=>await OnFilterOperatorChangedAsync(item))">
                        <span class="filter-symbol">@item.Symbol</span> <span>@item.Text</span>
                    </div>
                </li>
            }
        }
    </ul>

    @if (PropertyTypeName == StringConstants.PropertyTypeNameInt16
    || PropertyTypeName == StringConstants.PropertyTypeNameInt32
    || PropertyTypeName == StringConstants.PropertyTypeNameInt64
    || PropertyTypeName == StringConstants.PropertyTypeNameSingle // float
    || PropertyTypeName == StringConstants.PropertyTypeNameDecimal
    || PropertyTypeName == StringConstants.PropertyTypeNameDouble)
    {
        <input class="form-control" style="@FilterStyle" type="number" value="@filterValue" @oninput="OnFilterValueChangedAsync">
    }
    else if (PropertyTypeName == StringConstants.PropertyTypeNameDateOnly)
    {
        <input class="form-control" style="@FilterStyle" type="date" value="@filterValue" @oninput="OnFilterValueChangedAsync" />
    }
    else if (PropertyTypeName == StringConstants.PropertyTypeNameDateTime)
    {
        <input class="form-control" style="@FilterStyle" type="datetime-local" value="@filterValue" @oninput="OnFilterValueChangedAsync" />
    }
    else if (PropertyTypeName == StringConstants.PropertyTypeNameBoolean)
    {
        <input class="form-check-input" type="checkbox" value="@filterValue" @onchange="OnFilterValueChangedAsync" />
    }
    else if (PropertyTypeName == StringConstants.PropertyTypeNameEnum)
    {
        <Dropdown>
            <DropdownToggleButton Class="px-1" Style="@FilterStyle" Color="ButtonColor.Light">
                @if (string.IsNullOrWhiteSpace(filterValue))
                {
                    <span class="px-2">Select</span>
                }
                else
                {
                    <span class="px-2">@filterValue</span>
                }
            </DropdownToggleButton>
            <DropdownMenu>
                @if (PropertyType is not null)
                {
                    @foreach (var item in Enum.GetValues(PropertyType!))
                    {
                        <DropdownItem @onclick="OnEnumFilterValueChangedAsync">@item</DropdownItem>
                    }
                }
            </DropdownMenu>
        </Dropdown>
    }
    else // guid or string
    {
        <input class="form-control" style="@FilterStyle" type="text" value="@filterValue" @oninput="OnFilterValueChangedAsync" />
    }
</div>
